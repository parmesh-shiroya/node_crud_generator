const path = require('path');
const ErrorResponse = require('../utils/errorResponse');
const asyncHandler = require('../middleware/async');
const geocoder = require('../utils/geocoder');
const Bootcamp = require('./Bootcamp');

// @desc      Get all {{components_name}}
// @route     GET /api/v1/{{components_name}}
// @access    Public
exports.get{{components_name}} = asyncHandler(async (req, res, next) => {
  res.status(200).json(res.advancedResults);
});

// @desc      Get single {{component_name}}
// @route     GET /api/v1/{{components_name}}/:id
// @access    Public
exports.get{{component_name}} = asyncHandler(async (req, res, next) => {
  const data = await Bootcamp.findById(req.params.id);

  if (!data) {
    return next(
      new ErrorResponse(`{{Component_name}} not found with id of ${req.params.id}`, 404)
    );
  }

  res.status(200).json({ success: true, data: data });
});

// @desc      Create new {{component_name}}
// @route     POST /api/v1/{{components_name}}
// @access    Private
exports.create{{Component_name}} = asyncHandler(async (req, res, next) => {
  

  
  const data = await Bootcamp.create(req.body);

  res.status(201).json({
    success: true,
    data: data
  });
});

// @desc      Update {{component_name}}
// @route     PUT /api/v1/{{components_name}}/:id
// @access    Private
exports.update{{Component_name}} = asyncHandler(async (req, res, next) => {
  let data = await Bootcamp.findById(req.params.id);

  if (!data) {
    return next(
      new ErrorResponse(`{{Component_name}} not found with id of ${req.params.id}`, 404)
    );
  }

 

  data = await Bootcamp.findByIdAndUpdate(req.params.id, req.body, {
    new: true,
    runValidators: true
  });

  res.status(200).json({ success: true, data: data });
});

// @desc      Delete {{component_name}}
// @route     DELETE /api/v1/{{components_name}}/:id
// @access    Private
exports.delete{{Component_name}} = asyncHandler(async (req, res, next) => {
  const data = await Bootcamp.findById(req.params.id);

  if (!data) {
    return next(
      new ErrorResponse(`{{Component_name}} not found with id of ${req.params.id}`, 404)
    );
  }


 await data.remove();

  res.status(200).json({ success: true, data: {} });
});
